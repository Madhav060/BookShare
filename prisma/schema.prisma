// ============================================
// PRISMA CONFIG
// ============================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:Madhav060@db.sqmklhumcytklnjmfaxh.supabase.co:5432/postgres"
}

// ============================================
// USER MODELS
// ============================================

model User {
  id                   Int                   @id @default(autoincrement())
  name                 String
  email                String                @unique
  password             String
  role                 Role                  @default(USER)
  bio                  String?
  avatar               String?
  location             String?
  rating               Float                 @default(5.0)
  totalBorrows         Int                   @default(0)
  totalLends           Int                   @default(0)
  points               Int                   @default(100) // ðŸ†• Points System
  createdAt            DateTime              @default(now())
  
  // Existing Relations
  ownedBooks           Book[]                @relation("OwnedBooks")
  heldBooks            Book[]                @relation("HeldBooks")
  requests             BorrowRequest[]       @relation("UserRequests")
  deliveryAgentProfile DeliveryAgentProfile?
  assignedDeliveries   Delivery[]            @relation("DeliveryAgent")
  givenReviews         Review[]              @relation("ReviewAuthor")
  receivedRatings      UserRating[]          @relation("RatedUser")
  givenRatings         UserRating[]          @relation("RaterUser")
  notifications        Notification[]

  // ðŸ†• New Relations
  pointTransactions    PointTransaction[]
  pointPurchases       PointPurchase[]
}

model DeliveryAgentProfile {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  user            User     @relation(fields: [userId], references: [id])
  phoneNumber     String
  vehicleType     String?
  licenseNumber   String?
  isAvailable     Boolean  @default(true)
  rating          Float    @default(5.0)
  totalDeliveries Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model UserRating {
  id          Int      @id @default(autoincrement())
  ratedUserId Int
  ratedUser   User     @relation("RatedUser", fields: [ratedUserId], references: [id])
  raterUserId Int
  rater       User     @relation("RaterUser", fields: [raterUserId], references: [id])
  rating      Int      // 1-5 stars
  comment     String?
  context     String   // 'borrower' or 'lender'
  createdAt   DateTime @default(now())

  @@unique([ratedUserId, raterUserId, context])
}

// ============================================
// BOOK MODELS
// ============================================

model Book {
  id             Int            @id @default(autoincrement())
  title          String
  author         String
  status         BookStatus     @default(AVAILABLE)
  isVisible      Boolean        @default(true)
  deletedAt      DateTime?
  isbn           String?
  description    String?
  coverImage     String?
  publishYear    Int?
  language       String         @default("English")
  pageCount      Int?
  viewCount      Int            @default(0)
  borrowCount    Int            @default(0)
  createdAt      DateTime       @default(now())
  owner          User           @relation("OwnedBooks", fields: [ownerId], references: [id])
  ownerId        Int
  holder         User           @relation("HeldBooks", fields: [userId], references: [id])
  userId         Int
  borrowRequests BorrowRequest[]
  categories     BookCategory[]
  reviews        Review[]
}

model Category {
  id    Int            @id @default(autoincrement())
  name  String         @unique
  books BookCategory[]
}

model BookCategory {
  bookId     Int
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([bookId, categoryId])
}

model Review {
  id        Int      @id @default(autoincrement())
  bookId    Int
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation("ReviewAuthor", fields: [userId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@unique([bookId, userId])
}

// ============================================
// BORROW REQUEST MODEL
// ============================================

model BorrowRequest {
  id         Int                 @id @default(autoincrement())
  status     BorrowRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())
  book       Book                @relation(fields: [bookId], references: [id])
  bookId     Int
  borrower   User                @relation("UserRequests", fields: [borrowerId], references: [id])
  borrowerId Int
  delivery   Delivery?
}

// ============================================
// DELIVERY MODELS
// ============================================

model Delivery {
  id                Int           @id @default(autoincrement())
  borrowRequestId   Int           @unique
  borrowRequest     BorrowRequest @relation(fields: [borrowRequestId], references: [id])
  agentId           Int?
  agent             User?         @relation("DeliveryAgent", fields: [agentId], references: [id])
  pickupAddress     String
  deliveryAddress   String
  status            DeliveryStatus @default(PENDING)
  pickupScheduled   DateTime?
  pickupCompleted   DateTime?
  deliveryCompleted DateTime?
  trackingNotes     String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  verificationCode  String?
  codeVerifiedAt    DateTime?
  paymentStatus     PaymentStatus @default(PENDING)
  paymentAmount     Float?
  paymentId         String?
}

// ============================================
// NOTIFICATION MODEL
// ============================================

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  user      User             @relation(fields: [userId], references: [id])
  type      NotificationType
  title     String
  message   String
  relatedId Int?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}

// ============================================
// ðŸ†• POINT SYSTEM MODELS
// ============================================

model PointTransaction {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  amount       Int      // Positive for earning, negative for spending
  type         String   // 'BORROW', 'LEND', 'PURCHASE', 'INITIAL', 'REFUND'
  description  String
  relatedId    Int?     // BorrowRequest ID or Purchase ID
  balanceAfter Int      // User's balance after this transaction
  createdAt    DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model PointPurchase {
  id                 Int       @id @default(autoincrement())
  userId             Int
  user               User      @relation(fields: [userId], references: [id])
  points             Int       // Number of points purchased
  amount             Float     // Amount paid in rupees
  razorpayOrderId    String?
  razorpayPaymentId  String?
  status             String    @default("PENDING") // PENDING, COMPLETED, FAILED
  createdAt          DateTime  @default(now())
  completedAt        DateTime?
}

// ============================================
// ENUMS
// ============================================

enum Role {
  USER
  DELIVERY_AGENT
  ADMIN
}

enum BookStatus {
  AVAILABLE
  BORROWED
}

enum BorrowRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  PICKUP_SCHEDULED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  RETURN_SCHEDULED
  RETURN_PICKED_UP
  RETURN_DELIVERED
  COMPLETED
  CANCELLED
}

enum NotificationType {
  BORROW_REQUEST
  REQUEST_ACCEPTED
  REQUEST_REJECTED
  BOOK_RETURNED
  DELIVERY_ASSIGNED
  DELIVERY_PICKED_UP
  DELIVERY_DELIVERED
  NEW_REVIEW
  SYSTEM_MESSAGE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
